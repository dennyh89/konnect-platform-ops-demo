// main.tf
// This module creates self-signed certificates for the data plane nodes and stores them in Vault.
// It also creates a Vault mount and a KV secret engine to store the certificates.
// Pre-requisites:
// - Vault must be running.

terraform {
  required_providers {
    tls = {
      source = "hashicorp/tls"
      version = "4.0.6"
    }
    vault = {
      source = "hashicorp/vault"
      version = "4.4.0"
    }
  }
}

provider "vault" {
  address = var.vault_address
  token = var.vault_token
}

# Create a vault mount for the KV version 2 secret engine
resource "vault_mount" "kvv2" {
  path        = "konnect"
  type        = "kv"
  options     = { version = "2" }
  description = "Konnect Secrets storage"
}


# Create RSA key of size 4096 bits
# Security Notice:
# ================
# The private key generated by this resource will be stored unencrypted in your Terraform state file. 
# Use of this resource for production deployments is not recommended. 
# Instead, generate a private key file outside of Terraform and distribute it securely to the system where Terraform will be run.
resource "tls_private_key" "pkey" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

# Store the certificates in Vault
resource "vault_kv_secret_v2" "certificates" {
  mount               = vault_mount.kvv2.path
  name                = "certificates/common"
  delete_all_versions = true
  data_json = jsonencode(
    {
      tls_key = tls_private_key.pkey.private_key_pem
    }
  )
  custom_metadata {
    max_versions = 5
  }
}



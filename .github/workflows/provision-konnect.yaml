name: Provision Konnect

on:
  workflow_call:
    inputs:
      config:
        description: 'Path to the provisioning config file'
        type: string
        required: true
      action:
        description: 'Action to perform'
        required: true
        type: string
        default: 'provision' # 'provision' or 'destroy'
      environment:
        description: 'Environment to provision'
        type: string
        default: 'dev'

jobs:
  provision-konnect:
    runs-on: ubuntu-latest

    env:
      ENV_FILE: .github/env/${{ inputs.environment }}.yaml
      TERRAFORM_DIR: ${{ github.workspace }}/terraform/konnect
      TF_VAR_resources_file: ${{ github.workspace }}/${{ inputs.config }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load environment configuration
        uses: ./.github/actions/load-config
        with:
          environment: ${{ inputs.environment }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 'latest'
      
      - name: Import CA Certificate
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          token: ${{ env.VAULT_TOKEN }}
          secrets: |
            pki/cert/ca certificate | CA_CRT ;

      - name: Save CA Certificate to file
        run: |
          mkdir -p .tls
          touch .tls/ca.crt
          echo "${{ steps.import-secrets.outputs.CA_CRT }}" > .tls/ca.crt
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Create S3 bucket if required
        if: ${{ inputs.action == 'provision' }}
        run: |
          ./create-minio-bucket.sh konnect konnect
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
        working-directory: scripts

      - name: Terraform Init
        run: |

          # Extract required variables from the configuration file
          PLANID=$(jq -r '.metadata.plan' ${{ github.workspace }}/${{ inputs.config }})
          RESOURCE_GROUP=$(jq -r '.metadata.name' ${{ github.workspace }}/${{ inputs.config }})

          terraform init -upgrade \
            -backend-config=config.s3.tfbackend \
            -backend-config="bucket=konnect" \
            -backend-config="key=$PLANID/${RESOURCE_GROUP}_${{ inputs.environment }}.tfstate" \
            -backend-config="region=main" \
            -backend-config="access_key=${{ secrets.S3_ACCESS_KEY }}" \
            -backend-config="secret_key=${{ secrets.S3_SECRET_KEY }}" 

        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Plan
        if: ${{ inputs.action == 'provision' }}
        run: |
          terraform plan -out=tfplan
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Terraform Apply
        if: ${{ inputs.action == 'provision' }}
        id: tfapply
        run: |
          terraform apply -auto-approve tfplan
          # echo "$(terraform-bin output -json kong_gateway_control_plane_info | jq '[.[]]')" > kong_gateway_control_plane_info.json
          echo "$(terraform-bin output -json system_account_access_tokens)" > system_account_tokens.json
        working-directory: ${{env.TERRAFORM_DIR}}

      - name: Store System Account tokens in Vault
        if: ${{ inputs.action == 'provision' }}
        run: |
          for row in $(cat system_account_tokens.json | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }

            secret_name=$(_jq '.name')
            secret_value=$(_jq '.token')

            vault kv put secret/system-accounts/${secret_name} token=${secret_value}

            echo "Stored secret ${secret_name} in Vault."
          done
        working-directory: ${{env.TERRAFORM_DIR}}
      
      - name: Terraform destroy
        if: ${{ inputs.action == 'destroy' }}
        run: |
          terraform destroy -auto-approve
        working-directory: ${{env.TERRAFORM_DIR}}
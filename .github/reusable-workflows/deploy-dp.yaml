name: Deploy Kong Data Plane

on:
  workflow_call:
    inputs:
      namespace:
        description: 'Kubernetes namespace'
        required: true
        type: string
      tf_output:
        description: 'Terraform output'
        required: true
        type: string
      kong_image_repo:
        description: 'Kong image repository'
        default: 'kong/kong-gateway'
        type: string
      kong_image_tag:
        description: 'Kong image tag'
        default: '3.7.0.0'
        type: string
      vault_addr:
        description: 'Vault Address'
        default: 'http://localhost:8300'
        type: string
      vault_token:
        description: 'Vault Token'
        default: 'root'
        type: string

jobs: 
  deploy-dp:
  
    runs-on: ubuntu-latest

    env:
      NAMESPACE: ${{ inputs.namespace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Import Certificates
        id: import-certs
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ inputs.vault_addr }}
          token: ${{ inputs.vault_token }}
          secrets: |
            secret/data/certificates/demo * | DP_

      - name: Create Kong namespace if not exists
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Add Kong Helm Repository
        run: |
          helm repo add kong https://charts.konghq.com
          helm repo update
      
      - name: Create kong-cluster-cert secret if not exists
        run: |

          echo "$TLS_CERT" > tls.crt
          echo "$TLS_KEY" > tls.key

          kubectl create secret tls kong-cluster-cert \
              -n $NAMESPACE \
              --dry-run=client \
              --cert=tls.crt --key=tls.key -o yaml \
              | kubectl apply -f -

        env:
          TLS_CERT: ${{ steps.import-certs.outputs.DP_TLS_CRT }}
          TLS_KEY: ${{ steps.import-certs.outputs.DP_TLS_KEY }}

      - name: Deploy Kong Data Plane
        run: |
          CONTROL_PLANE_ENDPOINT=$(echo $TF_OUTPUT | jq -r .config.control_plane_endpoint | sed 's|https://||')
          TELEMETRY_ENDPOINT=$(echo $TF_OUTPUT | jq -r .config.telemetry_endpoint | sed 's|https://||')
          
          helm upgrade --install kong-dp kong/kong \
            -n $NAMESPACE --create-namespace \
            --values ./k8s/values.yaml \
            --set env.cluster_control_plane=$CONTROL_PLANE_ENDPOINT:443 \
            --set env.cluster_server_name=$CONTROL_PLANE_ENDPOINT \
            --set env.cluster_telemetry_endpoint=$TELEMETRY_ENDPOINT:443 \
            --set env.cluster_telemetry_server_name=$TELEMETRY_ENDPOINT \
            --set env.cluster_cert=/etc/secrets/kong-cluster-cert/tls.crt \
            --set env.cluster_cert_key=/etc/secrets/kong-cluster-cert/tls.key
        env:
          TF_OUTPUT: ${{inputs.tf_output}}